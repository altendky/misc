#!/bin/bash

export ME="$(BASENAME \"$0\")"
export SRCROOT="$(pwd)"

if [ $# -ne 1 ]; then
    echo "${ME}: 1 parameter expected (e.g. linux-64), $# received"
    exit 1
fi

export TARGET="$1"

set -e
set -vx

source setenv

mkdir -p ${BUILDROOT}
cd ${BUILDROOT}
mkdir -p sysroot-${TARGET}
ln -fs sysroot-${TARGET} sysroot
mkdir -p "${SYSROOT}/src"
mkdir -p "${SYSROOT}/native/src"

function get_src {
    export LIB="$1"
    export VERSION="$2"
    export NAME="${LIB}-${VERSION}"
    export EXT="$3"
    export URLBASE="$4"
    if [ "$5" ]; then
        export NATIVE="/native"
    else
        export NATIVE=""
    fi
    export TARBALL=${NAME}.${EXT}
    if [ ! -f "${BUILDROOT}/${TARBALL}" ]; then
        wget --directory-prefix="${BUILDROOT}" ${URLBASE}/${TARBALL}
    fi
    cd "${SYSROOT}${NATIVE}/src"
    if [ ! -d "${NAME}" ]; then
        tar -xvf "${BUILDROOT}/${TARBALL}"
    fi
    cd ${NAME}
}


function not {
    if [ ! -f "buildlibs.$1" ]; then
        return 0
    else
        return 1
    fi
}

function set_configed {
    touch buildlibs.configed
}

function runif {
    export FILE="buildlibs.$1"
    shift

    if [ ! -f "${FILE}" ]; then
        if "$@"; then
            touch "${FILE}"
        fi
    fi

    return ${RETURN}
}


function not_installed {
    if [ ! -f buildlibs.installed ]; then
        export not_installed=0
    else
        export not_installed=1
    fi

    touch buildlibs.installed

    return ${not_configed}
}


# for native Python pip
get_src openssl ${OPENSSL_VERSION} tar.gz https://www.openssl.org/source/old/${OPENSSL_VERSION_SHORT} native
#./Configure --prefix="${SYSROOT}/native" no-shared
runif config ./config --prefix="${SYSROOT}/native"
make
runif test make test
runif install make install


# TODO: we really shouldn't need this if we have a Python install already?
# but let's do it to make independent of existing...
get_src Python ${PYTHON_VERSION} tar.xz https://www.python.org/ftp/python/${PYTHON_VERSION} native
runif config ./configure --prefix=${SYSROOT}/native --with-ensurepip=install
make
runif install make install

get_src sip ${SIP_VERSION} tar.gz http://sourceforge.net/projects/pyqt/files/sip/sip-${SIP_VERSION} native
runif config ${PY} configure.py --static --sysroot="${SYSROOT}/native"
make
runif install make install

cd "${SYSROOT}/native/src"
if [ ! -d "mxe" ]; then
    git clone https://github.com/mxe/mxe.git
fi
cd mxe
export PACKAGES="gcc openssl qt5"
make MXE_TARGETS='i686-w64-mingw32.static' ${PACKAGES}
export PATH="${SYSROOT}/native/src/mxe/usr/i686-w64-mingw32.static/qt5/bin:${PATH}"
export PATH="${SYSROOT}/native/src/mxe/usr/bin:${PATH}"

export PREFIX="i686-w64-mingw32.static"
export CC=$PREFIX-gcc
#export QMAKE_CC=${CC}
export CXX=$PREFIX-g++
#export QMAKE_CXX=${CXX}
export CPP=$PREFIX-cpp
#export QMAKE_CPP=${CPP}
export RANLIB=$PREFIX-ranlib
export LD=$PREFIX-ld
export AS=$PREFIX-as

export QMAKE_XSPEC="win32-g++"


cd "${SYSROOT}"
runif python tar -xvf "${SRCROOT}/python${PYTHON_VERSION_SHORT}-sysroot.tgz"

get_src sip ${SIP_VERSION} tar.gz http://sourceforge.net/projects/pyqt/files/sip/sip-${SIP_VERSION}
pyqtdeploycli --package sip --target ${TARGET} configure
# TODO: no tools and no examples and no demos
runif configure python configure.py --static --sysroot="${SYSROOT}" --no-tools --use-qmake --configuration=sip-win.cfg
#runif configure python configure.py --static --sysroot="${SYSROOT}" --no-tools --use-qmake --platform win32-g++ --target-py-version=3.4
qmake
make
runif install make install

get_src PyQt-gpl ${PYQT_VERSION} tar.gz http://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-${PYQT_VERSION}
pyqtdeploycli --package pyqt5 --target ${TARGET} configure
#runif configure ${PY} configure.py --static --sysroot="${SYSROOT}" --disable=enginio --no-tools --no-qsci-api --no-designer-plugin --no-qml-plugin --configuration=pyqt5-linux.cfg --qmake="${SYSROOT}/qt-5.5.1/bin/qmake" --confirm-license
runif configure ${PY} configure.py --static --sysroot="${SYSROOT}" --disable=enginio --no-tools --no-qsci-api --no-designer-plugin --no-qml-plugin --configuration=pyqt5-win.cfg --confirm-license --sip="${SYSROOT}/native/bin/sip"
sed -i 's/QtDesigner \+//' PyQt5.pro
sed -i 's/QtOpenGL \+//' PyQt5.pro
sed -i 's/_QOpenGLFunctions_ES2 \+//' PyQt5.pro
runif qmake qmake -recursive PyQt5.pro
make
runif install make install

cp -r ${SRCROOT}/venv/src/* ${SYSROOT}/src

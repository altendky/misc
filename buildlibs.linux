#!/bin/bash

export ME="$(BASENAME \"$0\")"
export SRCROOT="$(pwd)"

#if [ $# -ne 1 ]; then
#    echo "${ME}: 1 parameter expected (e.g. linux-64), $# received"
#    exit 1
#fi
#
#export TARGET="$1"

set -e
set -vx

source "${SRCROOT}/setenv.linux"

mkdir -p ${BUILDROOT}
cd ${BUILDROOT}
mkdir -p ${SYSROOT_DEVICE}
ln -fsr "${SYSROOT_DEVICE}" "${SYSROOT}"
mkdir -p "${SYSROOT}/src"
mkdir -p "${SYSROOT}/native/src"

function get_src {
    export LIB="$1"
    export VERSION="$2"
    export NAME="${LIB}-${VERSION}"
    export EXT="$3"
    export URLBASE="$4"
    if [ "$5" ]; then
        export NATIVE="/native"
    else
        export NATIVE=""
    fi
    export TARBALL=${NAME}.${EXT}
    if [ ! -f "${BUILDROOT}/${TARBALL}" ]; then
        wget --directory-prefix="${BUILDROOT}" ${URLBASE}/${TARBALL}
    fi
    cd "${SYSROOT}${NATIVE}/src"
    if [ ! -d "${NAME}" ]; then
        export FULLPATH="${BUILDROOT}/${TARBALL}"
        if [ "7z" == "${EXT}" ]; then
            7z x ${FULLPATH}
        else
            tar -xvf "${FULLPATH}"
        fi
    fi
    cd ${NAME}
}


function not {
    if [ ! -f "buildlibs.$1" ]; then
        return 0
    else
        return 1
    fi
}

function set_configed {
    touch buildlibs.configed
}

function runif {
    export FILE="buildlibs.$1"
    shift

    if [ ! -f "${FILE}" ]; then
        if "$@"; then
            touch "${FILE}"
        fi
    fi

    return ${RETURN}
}


function not_installed {
    if [ ! -f buildlibs.installed ]; then
        export not_installed=0
    else
        export not_installed=1
    fi

    touch buildlibs.installed

    return ${not_configed}
}


echo - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  Native SIP
get_src sip ${SIP_VERSION} tar.gz http://sourceforge.net/projects/pyqt/files/sip/sip-${SIP_VERSION} native
pyqtdeploycli --package sip configure
runif configure ${PY} configure.py
make
runif install make install DESTDIR="${SYSROOT}/native"


echo - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  Cross zlib
get_src zlib ${ZLIB_VERSION} tar.gz http://zlib.net/
(
    #export INSTALLDIR=~/workbench/gcc-4.8.2/arm
    #export PATH=$INSTALLDIR/bin:$PATH
    export TARGETMACH=${DEVICE}
    #export BUILDMACH=i686-pc-linux-gnu
    export CROSS=${DEVICE}
    export CC=${CROSS}-gcc
    export LD=${CROSS}-ld
    export AS=${CROSS}-as
    runif configure ./configure --prefix=${TARGET_ROOT}
    #runif configure ./configure --host=${DEVICE} --build=x86_64-unknown-linux-gnu --prefix=${TARGET_ROOT}
    make
    runif install make install DESTDIR="${SYSROOT}/root/all"
)


echo - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  Cross Python
get_src Python ${PYTHON_VERSION} tar.xz https://www.python.org/ftp/python/${PYTHON_VERSION}
export PYTHON_ROOT="${SYSROOT}/root/all"
export SYSROOT_BAK="${SYSROOT}"
export SYSROOT="${PYTHON_ROOT}"
export CONFIG_SITE=config.site
echo ac_cv_file__dev_ptmx=no > ${CONFIG_SITE}
echo ac_cv_file__dev_ptc=no >> ${CONFIG_SITE}
cp Modules/Setup.dist Modules/Setup
# TODO the CPP and LD flags seem to be compensating for it using ${TARGET_ROOT} without ${PYTHON_ROOT} so it apparently needs to know both here to be setup right.
runif config ./configure --host=${DEVICE} --build=x86_64-unknown-linux-gnu --prefix=${TARGET_ROOT} --disable-ipv6 --without-ensurepip CPPFLAGS="${CPPFLAGS} -I\"${PYTHON_ROOT}/${TARGET_ROOT}/include\"" LDFLAGS="${LDFLAGS} -Wl,-L\"${PYTHON_ROOT}/${TARGET_ROOT}/lib\""
# needed to manually enable building of various modules for the sake of setuptools below and others
# TODO: this should not be needed, at least not manually and individually
for m in _struct binascii unicodedata _posixsubprocess math pyexpat _md5 _sha1 _sha256 _sha512 select _random _socket zlib fcntl; do
    sed -i "s/^#\(${m}\)/\1/" Modules/Setup
done
make
runif install make install DESTDIR="${PYTHON_ROOT}"
cd "${PYTHON_ROOT}"
export SYSROOT="${SYSROOT_BAK}"
#runif tarball tar -cvzf ../python_root.tgz "$(dirname ${TARGET_ROOT:1})"


echo - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  Cross Setuptools
get_src setuptools ${SETUPTOOLS_VERSION} tar.gz https://pypi.python.org/packages/21/d7/3e7e4b42d40469d2b770e10aee5b49538ecf2853eb5635d2d2536b286e2d
export SETUPTOOLS_ROOT="${PYTHON_ROOT}"
runif install ${PY} setup.py install --force --root "${SETUPTOOLS_ROOT}" --prefix "${TARGET_ROOT}"


echo - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  Cross Qt
get_src qt-everywhere-opensource-src ${QT_VERSION} 7z http://download.qt.io/archive/qt/${QT_VERSION_SHORT}/${QT_VERSION}/single
export QT_ROOT="${SYSROOT}/root/all${TARGET_ROOT}"
export SYSROOT_BAK="${SYSROOT}"
export SYSROOT="${QT_ROOT}"
runif a rm -rf qtbase/mkspecs/${QMAKE_XSPEC}
runif b cp -R qtbase/mkspecs/linux-arm-gnueabi-g++ qtbase/mkspecs/${QMAKE_XSPEC}
runif c sed -i "s/arm-linux-gnueabi-/${QMAKE_XSPEC}-/g" qtbase/mkspecs/${QMAKE_XSPEC}/qmake.conf
runif d sed -i 's/\(QMAKE_LINK .*\)/\1 -lrt/g' qtbase/mkspecs/${QMAKE_XSPEC}/qmake.conf
export NO_QML="-skip qtdeclarative -skip qtquickcontrols"
runif config ./configure -v -release -platform linux-g++ -xplatform ${QMAKE_XSPEC} -linuxfb -nomake examples -nomake tests -no-gcc-sysroot -sysroot ${TARGET_ROOT} -extprefix ${QT_ROOT} -hostprefix ${SYSROOT_BAK}/native -opensource -confirm-license -skip qt3d -skip qtactiveqt -skip qtcanvas3d -skip qtconnectivity -skip qtenginio -skip qtlocation -skip qtmultimedia -skip qtquickcontrols2 -skip qtscript -skip qtsensors -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtdoc -skip qttools -nomake tools -no-warnings-are-errors -v ${NO_QML}
make
runif install make install

export SYSROOT="${SYSROOT_BAK}"

export QMAKE_X="${SYSROOT}/native/bin/qmake"


echo - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  Cross SIP
get_src sip ${SIP_VERSION} tar.gz http://sourceforge.net/projects/pyqt/files/sip/sip-${SIP_VERSION}
export SIP_ROOT="${SYSROOT}/root/all"
sed "s;\$ROOTFS;${SIP_ROOT}${TARGET_ROOT};g" "${SRCROOT}/sip.cfg" > sip.cfg
runif configure ${PY} configure.py --sysroot="${SIP_ROOT}" --use-qmake --configuration=sip.cfg
${QMAKE_X}
make
runif install make install


echo - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  Cross PyQt
get_src PyQt${PYQT_MAJOR}_gpl ${PYQT_VERSION} tar.gz http://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-${PYQT_VERSION}
export PYQT_ROOT="${SYSROOT}/root/all"
sed "s;\$ROOTFS;${PYQT_ROOT}${TARGET_ROOT};g" "${SRCROOT}/pyqt.cfg" > pyqt.cfg
export NO_QML="--no-qml-plugin"
runif configure ${PY} configure.py --sysroot="${PYQT_ROOT}" --disable=enginio --no-tools --no-qsci-api --no-designer-plugin --confirm-license --sip="${SYSROOT}/native/usr/bin/sip" --qmake="${QMAKE_X}" --verbose --configuration pyqt.cfg ${NO_QML}
runif qmake ${QMAKE_X} -recursive PyQt5.pro
make
runif install make install


cd "${SYSROOT}/root/all"
echo export LD_LIBRARY_PATH="$((for f in $(find . -name '*.so*'); do dirname $f; done) | sort | uniq | sed 's/^\.//' | tr '\n' ':')" > "${TARGET_ROOT:1}/bin/ld_path"
cd "${SRCROOT}"
for f in qt_env reinstall-epc hello.py hello; do
    cd "${SYSROOT}/root/all/${TARGET_ROOT}/bin"
    cp "${SRCROOT}/$f" .
done
cd "${SYSROOT}/root/all"
# make this use the variables...
cp -R "${SRCROOT}/init.d" opt/epc/
mkdir -p opt/bin/
cp -R "${SRCROOT}/reinstall-epc" opt/bin/
export TARBALL="${SYSROOT}/root/all/$(echo $(echo ${TARGET_ROOT} | tr '/' ' ') | tr ' ' '_').tgz"
tar -cvzf "${TARBALL}" "$(echo ${TARGET_ROOT} | sed 's;/\([^/]\+\)/.*;\1;')"

echo -n 'Copy to USB (y/n)?'
read COPY
if [ "y" == "${COPY}" ]; then
    export DEV=/dev/sdc1
    export DEST=/media/sdc1
    pmount "${DEV}"
    cp "${TARBALL}" "${DEST}"
    cp "${SRCROOT}/reinstall-epc" "${DEST}"
    pumount "${DEV}"
fi
